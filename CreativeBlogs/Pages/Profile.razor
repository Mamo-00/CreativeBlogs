@page "/Posts"
@inject IBlogPostData blogpostData
@inject IUserData userData
@inject NavigationManager navManager

<div class="d-flex">
    <div class="left-side-width float-start me-4 vertical-r"></div>
    <main class="main-width mt-lg-4 mx-lg-4">
        <div>
            <div class="mx-auto">
                <div class="d-flex align-items-center justify-content-between flex-wrap">
                    <div class="d-block">
                        <h1 class="">Your Posts</h1>
                    </div>
                    <div></div>
                    <div class="d-flex">
                        <button class="btn btn-dark me-2 my-2 bs-bb custom-button" @onclick="CreatePage">Create</button>
                        <div class="d-block mx-1"></div>
                        <button class="btn btn-dark me-2 my-2 bs-bb custom-button" @onclick="ClosePage">Home</button>
                    </div>
                </div>
            </div>
            <div>
                @if (submissions is not null)
                {
                    @foreach (var b in submissions)
                    {
                        <div id="TheBigContainer" class="w-50 mt-4 overflow-auto" @onclick="(() => OpenDetails(b))">
                            <hr/>
                            <div id="TopRowOfContainer" class="d-flex justify-content-start">
                                <div class="me-2">@b?.Author.DisplayName</div>
                                <div>@b?.DateCreated.ToString("MM.dd.yyyy")</div>
                                <span class="ms-auto me-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark" viewBox="0 0 16 16">
                                        <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
                                    </svg>
                                </span>
                            </div>
                            <div id="MiddleContent">
                                <hr/>
                                <div id="Header">@b.Title</div>
                                <div id="Description">@GetSubstringDescription(b.Description)</div>
                            </div>
                            <div id="BottomContent" class="d-flex justify-content-lg-start">
                                <span class="mx-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-tags" viewBox="0 0 16 16">
                                        <path d="M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z" />
                                        <path d="M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z" />
                                    </svg>
                                </span>
                                <div>
                                    @b.Tag.TagName
                                </div>
                                <hr/>
                            </div>
                        </div>
                    }
                }
                
            </div>
        </div>
    </main>
    <div id="sidebar" class="r-side-width ms-4 vertical-l"></div>
</div>



@code {
    private UserModel loggedInUser;
    private List<BlogPostModel> submissions;

    protected async override Task OnInitializedAsync()
    {
        // TODO: replace with real user (this is test)
        loggedInUser = await userData.GetUserFromAuthentication("63408785cb31c1c3ac14932f");

        var results = await blogpostData.GetUsersBlogPosts(loggedInUser.Id);

        if (loggedInUser is not null && results is not null)
        {
            submissions = results.OrderByDescending(b => b.DateCreated).ToList();
        }

    }

    private string GetSubstringDescription(string description)
    {
        if (description.Length > 100)
        {
            return description = description.Substring(0, 100);
        }
        else
        {
            return description;
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void CreatePage()
    {
        navManager.NavigateTo("/Create");
    }

    private void OpenDetails(BlogPostModel blogPost)
    {
        navManager.NavigateTo($"/Details/{blogPost.Id}");
    }
}
