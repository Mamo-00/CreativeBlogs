@page "/"
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject ITagsData tagData
@inject IBlogPostData postData
@inject IUserData userData
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Creative Blogs</PageTitle>

<link rel="shortcut icon" type="image/x-icon" href="./Images/" />
<div class="d-flex">
    <div class="left-side-width float-start me-4 vertical-r"></div>
    <main class="main-width mt-lg-4 mx-lg-4">
        <div class="d-flex justify-content-evenly border-style w-50 py-2 mx-auto">
            <button class="btn me-2 mx-auto my-2 custom-button" @onclick="() => OrderByNew(true)"><span>Recent</span></button>
            <button class="btn me-2 mx-auto my-2 custom-button" @onclick="() => OrderByNew(false)"><span>Top</span></button>
        </div>
        <div class="container">
            @if (tags?.Count > 0)
            {
                @foreach (var t in tags)
                {
                    <div @onclick="(() =>  OnTagPerform(t.TagName))" class=" @TagFocus my-2 mx-2 btn radio-item-group">@t.TagName</div>
            }

            }
        </div>

        <div id="blog-post-section">
            @if (blogposts is not null)
            {
                <Virtualize Items="@blogposts" Context="b" OverscanCount="10">
                    <div id="TheBigContainer" class="w-50 mt-4 overflow-auto" >
                        <div id="TopRowOfContainer" class="d-flex justify-content-start">
                            <div class="me-2">@b?.Author.DisplayName</div>
                            <div>@b?.DateCreated.ToString("MM.dd.yyyy")</div>
                            <span class="ms-auto me-2 d-flex gap-1 align-items-center" @onclick="() => Bookmark(b)">
                                <div>@GetBookmarkText(b)</div>
                                
                                @if (b.Author.Id != loggedInUser.Id)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark" viewBox="0 0 16 16">
                                        <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
                                    </svg>
                                }
                                else
                                {
                                    <div id="empty"></div>
                                }
                            </span>
                        </div>
                        <div id="MiddleContent" @onclick="(() => OpenDetails(b))">
                            <div id="Header">@b.Title</div>
                            <div id="Description">@GetSubstringDescription(b.Description)</div>
                        </div>
                        <div id="BottomContent" class="d-flex justify-content-lg-start">
                            <span  class="mx-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" id="bookmark" class="bi bi-tags" viewBox="0 0 16 16">
                                    <path d="M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z" />
                                    <path d="M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z" />
                                </svg>
                            </span>
                            <div>
                                @b.Tag.TagName
                            </div>
                        </div>
                    </div>
                </Virtualize>
            }
        </div>
        
    </main>
    <div id="right-vr" class="right-side-width ms-4 vertical-l d-flex flex-column">
        <div>
            <input type="text"
                   class="searchbox rounded-pill border-0 "
                   placeholder="Search"
                   @bind-value="@this.InputValue"
                   @bind-value:event="oninput"
                   @onkeydown="@OnSearchInput" />
        </div>
        <div class="sidebar">
            <button class="btn me-2 mx-auto my-2 custom-button" @onclick="HomePage"><span>Home</span></button>
            <button class="btn me-2 mx-auto my-2 custom-button" @onclick="CreatePage"><span>Create</span></button>
            <button class="btn me-2 mx-auto my-2 custom-button" @onclick="YourPostsPage"><span>Your Posts</span></button>
            <button class="btn me-2 mx-auto my-2 custom-button" @onclick="CreatePage"><span>Write</span></button>
        </div>
    </div>
    
</div>






@code {
    private UserModel loggedInUser;
    private List<BlogPostModel> blogposts;
    private List<TagModel> tags;
    public string InputValue { get; private set; }
    public string TagFocus { get; set; }

    private string selectedTag = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync() 
    {
        tags = await tagData.GetAllTags();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser() 
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            //if user does not exist, data is not dirty and user will be added to database
            bool isDirty = false;
            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender) 
    {
        if(firstRender) 
        {
            await LoadFilterState();
            await FilterBlogPosts();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState() 
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedTag));
        selectedTag = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }



    private async Task SaveFilterState() 
    {
        await sessionStorage.SetAsync(nameof(selectedTag), selectedTag);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterBlogPosts() 
    {
        var output = await postData.GetAllBlogPosts();

        if (selectedTag != "All")
        {
            output = output.Where(b => b.Tag?.TagName == selectedTag).ToList();
        }
        else
        {
            output.ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                b => b.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                b.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) || 
                b.Tag.TagName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(b => b.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(b => b.Bookmarks.Count)
                            .ThenByDescending(b => b.DateCreated).ToList();
        }

        blogposts = output;

        await SaveFilterState();
    }

    private void SamplePage() 
    {
        navManager.NavigateTo("/SampleData");
    }
    private void HomePage()
    {
        navManager.NavigateTo("/");
    }

    private void CreatePage() 
    {
        navManager.NavigateTo("/Create");
    }

    private void YourPostsPage()
    {
        navManager.NavigateTo("/Posts");
    }

    private string GetSubstringDescription(string description) 
    {
        if (description.Length > 120)
        {
            return description = description.Substring(0, 120) + "...";
        }
        else
        {
            return description;
        }
    }
    private async Task OrderByNew(bool isNew) 
    {
        isSortedByNew = isNew;
        await FilterBlogPosts();
    }


    private async void OnSearchInput(KeyboardEventArgs e)
    {
        var search = this.InputValue;

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            searchText = search;
            await FilterBlogPosts();
        }
    }

    private void OnTagFocus() 
    {

        if (TagFocus == "tag-focus")
        {
            TagFocus = "";
        }
        else
        {
            TagFocus = "tag-focus";
        }
    }


    private async Task OnTagClick(string tag = "All") 
    {

        selectedTag = tag;

        await FilterBlogPosts();
    }

    private async Task OnTagPerform(string tag = "All") 
    {
        OnTagFocus();
        await OnTagClick(tag);
    }

    private string GetBookmarkText(BlogPostModel blogPost) 
    {
        return blogPost.Bookmarks.Count.ToString("00");
    }

    private void OpenDetails(BlogPostModel blogPost) 
    {
        navManager.NavigateTo($"/Details/{blogPost.Id}");
    }

    private async Task Bookmark(BlogPostModel blogpost) 
    {
        if (loggedInUser is not null)
        {
            if (blogpost.Author.Id == loggedInUser.Id)
            {
                //can't bookmark your own post
                return;
            }
            if (blogpost.Bookmarks.Add(loggedInUser.Id) == false)
            {
                blogpost.Bookmarks.Remove(loggedInUser.Id);
            }
            await postData.BookmarkBlogPost(blogpost.Id, loggedInUser.Id);
            if (isSortedByNew == false)
            {
                blogposts = blogposts.OrderByDescending(b => b.Bookmarks.Count)
                            .ThenByDescending(b => b.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }
}


