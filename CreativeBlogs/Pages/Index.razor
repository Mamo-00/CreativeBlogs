@page "/"
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject ITagsData tagData
@inject IBlogPostData postData
@inject IUserData userData
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Creative Blogs</PageTitle>




@*<div class="left-side-width float-start vertical-r"></div><link rel="shortcut icon" type="image/x-icon" href="./Images/" />*@

<div class="row mt-2">
    @*<div class="col-md-8 col-xl-9  d-flex justify-content-evenly flex-wrap my-2 py-2 border-style sort-btn-bg">
        <button class="btn mx-auto my-2 custom-button" @onclick="() => OrderByRecent()"><span>RECENT</span></button>
        <button class="btn mx-auto my-2 custom-button" @onclick="() => OrderByTop()"><span>TOP</span></button>
        <button class="btn mx-auto my-2 custom-button" @onclick="() => OrderByHot()"><span>HOT</span></button>
        <button class="btn mx-auto my-2 custom-button" @onclick="() => OrderByOld()"><span>OLD</span></button>

    </div>*@
    
    
    <div class="col-md-8 col-xl-9 col-12 mt-2 justify-content-evenly ">
        <div class="row">
            <div class="col-4 px-0">
                <div class="dropdown dp-style ">
                    <button class="btn custom-button dropdown-toggle mx-auto" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="sortOrder"><span>@sortPosts</span></button>
                    <ul class="dropdown-menu dropdown-menu-dark menu-bg" aria-labelledby="sortOrder">
                        <li><div class="dropdown-item text-black" @onclick="() => OrderByRecent()"><span>NEW</span></div></li>
                        <li> <div class="dropdown-item text-black" @onclick="() => OrderByTop()"><span>TOP</span></div></li>
                        <li><div class="dropdown-item text-black" @onclick="() => OrderByHot()"><span>HOT</span></div></li>
                        <li><div class="dropdown-item text-black" @onclick="() => OrderByOld()"><span>OLD</span></div></li>
                    </ul>
                </div>
            </div>
            <div class="col-4 px-0">
                <div class="dropdown dp-style ">
                    <button class="btn custom-button dropdown-toggle mx-auto" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="sortTags">
                        @switch (selectedTag)
                        {
                            case "Health & Fitness":
                                <span>H&F...</span>
                                break;

                            case "Science":
                                <span>Sci...</span>
                                break;

                            case "Literature":
                                <span>Lit...</span>
                                break;

                            case "Philosophy":
                                <span>Phil...</span>
                                break;

                            case "Religion":
                                <span>Rel...</span>
                                break;

                            case "Hobbies":
                                <span>Hob...</span>
                                break;

                            case "Fiction":
                                <span>Fic...</span>
                                break;

                            case "Travelling":
                                <span>Trav...</span>
                                break;

                            case "Technology":
                                <span>Tech...</span>
                                break;

                            case "Politics":
                                <span>Pol...</span>
                                break;

                            default: 
                                <span>@selectedTag</span>
                                break;
                        }

                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark menu-bg" aria-labelledby="sortTags">
                        @if (tags?.Count > 0)
                        {
                            @foreach (var t in tags)
                            {
                                <li id="@t.TagName" @onclick="(() =>  OnTagClick(t.TagName))"><a class="dropdown-item text-black " href="#">@t.TagName</a></li>

                            }
                        }

                    </ul>
                </div>
            </div>
            <div class="d-block d-md-none col-4 px-0 ">
                <div class="dropdown dp-style">
                    <button class="btn custom-button dropdown-toggle mx-auto" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="sortOrder"><span>Home</span></button>
                    <ul class="dropdown-menu dropdown-menu-dark menu-bg" aria-labelledby="sortOrder">
                        <li><div class="dropdown-item text-black" @onclick="HomePage"><span>Home</span></div></li>
                        <li><div class="dropdown-item text-black" @onclick="YourPostsPage"><span>Your Posts</span></div></li>
                        <li><div class="dropdown-item text-black" @onclick="BookmarksPage"><span>Bookmarks</span></div></li>
                        <li><div class="dropdown-item text-black" @onclick="CreatePage"><span>Write</span></div></li>
                        <li><div class="dropdown-item text-black"><span><LoginDisplay /></span></div></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="searchbox col-md-4 col-xl-3 mt-4 mx-auto">
        <input type="text"
               class="form-control s-input-style "
               placeholder="Search"
               @bind-value="@this.InputValue"
               @bind-value:event="oninput"
               @onkeydown="@OnSearchInput" />
    </div>

</div>

<div class="row">
    <main class="col-md-8 col-xl-9 mt-2 ps-0">


        @*<div class="container-tags">
            @if (tags?.Count > 0)
            {
                @foreach (var t in tags)
                {
                    <div type="button" id="@t.TagName" @onclick="(() =>  OnTagClick(t.TagName))" class=" @OnTagFocus(t.TagName) my-2 btn radio-item-group">@t.TagName</div>
                }

            }
        </div>*@

        <section id="blog-post-section" class="shadow px-2 py-2 mt-4" >
            @if (blogposts is not null)
            {
                <Virtualize Items="@blogposts" Context="b" OverscanCount="10">
                    <article id="TheBigContainer" class=" mt-4 overflow-auto ">
                        <div id="TopRowOfContainer" class="d-flex justify-content-start mb-2">
                            <div class="me-2">@b?.Author.DisplayName</div>
                            <div class="me-1">@b?.DateCreated.ToString("MM.dd.yyyy")</div>
                            <span class="ms-auto ms-2 d-flex gap-1 align-items-baseline" @onclick="() => Bookmark(b)">
                                <div class="ps-1">@GetBookmarkText(b)</div>

                                @if (b.Author.Id != loggedInUser?.Id)
                                {
                                    if (b.Bookmarks.Contains(loggedInUser?.Id))
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="19" height="19" fill="currentColor" class="bi bi-bookmark-fill pointer pt-1" viewBox="0 0 16 16">
                                            <path d="M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2z" />
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="19" height="19" fill="currentColor" class="bi bi-bookmark pointer pt-1" viewBox="0 0 16 16">
                                            <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
                                        </svg>
                                    }

                                }
                                else
                                {
                                    
                                    <svg xmlns="http://www.w3.org/2000/svg" width="19" height="19" fill="currentColor" class="bi bi-bookmark-x-fill pt-1" style="color: rgba(169,169,169,1);" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5zM6.854 5.146a.5.5 0 1 0-.708.708L7.293 7 6.146 8.146a.5.5 0 1 0 .708.708L8 7.707l1.146 1.147a.5.5 0 1 0 .708-.708L8.707 7l1.147-1.146a.5.5 0 0 0-.708-.708L8 6.293 6.854 5.146z" />
                                    </svg>
                                }
                                

                            </span>
                        </div>
                        <div id="MiddleContent" @onclick="(() => OpenDetails(b))">
                            <h2 id="Header" class="font-style text-break">@b.Title</h2>
                            <p id="Description" class="text-break">@GetSubstringDescription(b.Description)</p>
                        </div>
                        <div id="BottomContent" class="d-flex justify-content-lg-start mb-2">
                            <span class="me-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" id="bookmark" class="bi bi-tags" viewBox="0 0 16 16">
                                    <path d="M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z" />
                                    <path d="M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z" />
                                </svg>
                            </span>
                            <div>
                                @b.Tag.TagName
                            </div>
                        </div>
                         <div class="nav-links my-2">
                             @ReadingTime(b.Description)
                         </div>
                        

                    </article>
                    <hr class="horizontal-ruler" />
                </Virtualize>
            }
        </section>
    </main>

    @*<div id="right-vr" class="right-side-width vertical-l "></div>*@

    <div class="col-md-4 col-xl-3 d-none d-md-block">
        <div class="sidebar row shadow flex-column">
            <button class="btn col-12 mx-auto my-4 custom-button" @onclick="HomePage"><span >Home</span></button>
            <button class="btn col-12 mx-auto my-4 custom-button" @onclick="YourPostsPage"><span >Your Posts</span></button>
            <button class="btn col-12 mx-auto my-4 custom-button" @onclick="BookmarksPage"><span >Bookmarks</span></button>
            <button class="btn col-12 mx-auto my-4 custom-button" @onclick="CreatePage"><span>Write</span></button>
            <button class="btn col-12 mx-auto my-4 custom-button" aria-label="Log out"><span><LoginDisplay /></span></button>
        </div>
    </div>
   
</div>









@code {
    private UserModel loggedInUser;
    private List<BlogPostModel> blogposts;
    private List<TagModel> tags;
    public string InputValue { get; private set; }
    public string TagFocus { get; set; }

    private string selectedTag = "All";
    private string searchText = "";
    private string sortPosts = "NEW";
    private bool isSortedByNew = true;
    private bool isSortedByOld = true;

   
    protected async override Task OnInitializedAsync() 
    {
        tags = await tagData.GetAllTags();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser() 
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            //if user does not exist, data is not dirty and user will be added to database
            bool isDirty = false;
            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender) 
    {
        if(firstRender) 
        {
            await LoadFilterState();
            await FilterBlogPosts();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState() 
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedTag));
        selectedTag = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        stringResults = await sessionStorage.GetAsync<string>(nameof(sortPosts));
        sortPosts = stringResults.Success ? stringResults.Value : "NEW";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;

        boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByOld));
        isSortedByOld = boolResults.Success ? boolResults.Value : true;
    }



    private async Task SaveFilterState() 
    {
        await sessionStorage.SetAsync(nameof(selectedTag), selectedTag);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
        await sessionStorage.SetAsync(nameof(isSortedByOld), isSortedByOld);
    }

    private async Task FilterBlogPosts() 
    {
        var output = await postData.GetAllBlogPosts();

        if (selectedTag != "All")
        {
            output = output.Where(b => b.Tag?.TagName == selectedTag).ToList();
        }
        else
        {
            output.ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                b => b.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                b.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) || 
                b.Tag.TagName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (sortPosts == "NEW")
        {
            output = output.OrderByDescending(b => b.DateCreated).ToList();
        }
        if (sortPosts == "TOP") 
        {
            output = output.OrderByDescending(b => b.Bookmarks.Count)
                            .ThenByDescending(b => b.DateCreated).ToList();
        }
        if (sortPosts == "HOT")
        {
            //Get the top posts in descending order within a timeframe of 1 week
            DateTime dt7 = DateTime.Today.AddDays(-7);

            output = output.Where(b => b.DateCreated > dt7).OrderByDescending(b => b.Bookmarks.Count)
            .ThenByDescending(b => b.DateCreated).ToList();
        }
        if (sortPosts == "OLD")
        {
            output = output.OrderBy(b => b.DateCreated).ToList();
        }

        //if (isSortedByNew)
        //{
        //    output = output.OrderByDescending(b => b.DateCreated).ToList();

        //}
        //else
        //{
        //    //Popular all time
        //    output = output.OrderByDescending(b => b.Bookmarks.Count)
        //                    .ThenByDescending(b => b.DateCreated).ToList();
        //}
        //
        //if (isSortedByOld == true && isSortedByNew == false)
        //{
        //    output = output.OrderBy(b => b.DateCreated).ToList();
        //}
        //else if(isSortedByOld == false && isSortedByNew == false)
        //{
        //    //Popular of the week
        //    output = output.OrderByDescending(b => b.DateCreated.AddDays(-7)).ThenByDescending(b => b.Bookmarks.Count).ToList();
        //}

        blogposts = output;

        await SaveFilterState();
    }

    private void SamplePage() 
    {
        navManager.NavigateTo("./SampleData");
    }
    private void HomePage()
    {
        navManager.NavigateTo("./");
       
    }

    private void CreatePage() 
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("./Create");
            
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private void YourPostsPage()
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("./Posts");
            
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }

    }

    private void BookmarksPage()
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("./Bookmarks");
            
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }

    }

    private string GetSubstringDescription(string description) 
    {
        if (description.Length > 200)
        {
            return description = description.Substring(0, 200).TrimEnd() + "...";
        }
        else
        {
            return description;
        }
    }

    private async Task OrderByRecent(string recent = "NEW")
    {
        sortPosts = recent;
     
        await FilterBlogPosts();
    }

    private async Task OrderByTop(string top = "TOP")
    {
        sortPosts = top;
       
        await FilterBlogPosts();
    }

    private async Task OrderByHot(string hot = "HOT")
    {
        sortPosts = hot;
        
        await FilterBlogPosts();
    }

    private async Task OrderByOld(string old = "OLD")
    {
        sortPosts = old;
        
        await FilterBlogPosts();
    }

    private async void OnSearchInput(KeyboardEventArgs e)
    {
        var search = this.InputValue;

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            searchText = search;
            await FilterBlogPosts();
        }
    }

    private string OnTagFocus(string tag = "All")
    {

        if (tag == selectedTag)
        { 
            return TagFocus = "tag-focus";
        }
        else
        {
            return "";
        }
    }

    private async Task OnTagClick(string tag = "All") 
    {

        selectedTag = tag;
       
        await FilterBlogPosts();
    }

    private string GetBookmarkText(BlogPostModel blogPost) 
    {
        return blogPost.Bookmarks.Count.ToString("00");
    }

    private void OpenDetails(BlogPostModel blogPost) 
    {
        navManager.NavigateTo($"/Details/{blogPost.Id}");
    }

    private int GetWordCount(string text)
    {
        int wordCount = 0;
        int index = 0;
        while (index < text.Length && char.IsWhiteSpace(text[index]))
            index++;

        while (index < text.Length)
        {
            // check if current char is part of a word
            while (index < text.Length && !char.IsWhiteSpace(text[index]))
                index++;

            wordCount++;

            // skip whitespace until next word
            while (index < text.Length && char.IsWhiteSpace(text[index]))
                index++;
        }

        return wordCount;
    }

    private string ReadingTime(string text)
    {
        int wordCount = 0;
        int timeToRead = 0;
        string readingTime = "";

        wordCount = GetWordCount(text);

        timeToRead = wordCount / 250;

        //TimeSpan time = TimeSpan.FromMinutes(timeToRead);
        //string timeToString = time.ToString("mm");
        
        if (timeToRead < 1.5 )
        {
            readingTime = "1 minute";
        }
        else
        {
            readingTime = timeToRead.ToString() + " minutes";
        }

        return readingTime;
    }


    private async Task Bookmark(BlogPostModel blogpost) 
    {
        if (loggedInUser is not null)
        {
            if (blogpost.Author.Id == loggedInUser.Id)
            {
                //can't bookmark your own post
                return;
            }
            if (blogpost.Bookmarks.Add(loggedInUser.Id) == false)
            {
                blogpost.Bookmarks.Remove(loggedInUser.Id);
            }
            await postData.BookmarkBlogPost(blogpost.Id, loggedInUser.Id);
            if (sortPosts == "TOP")
            {
                blogposts = blogposts.OrderByDescending(b => b.Bookmarks.Count)
                            .ThenByDescending(b => b.DateCreated).ToList();
            }
            if (sortPosts == "HOT")
            {
                blogposts = blogposts.OrderByDescending(b => b.Bookmarks.Count)
                           .ThenByDescending(b => b.DateCreated.AddDays(-7)).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }
}


