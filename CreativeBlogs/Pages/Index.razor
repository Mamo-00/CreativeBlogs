@page "/"
@inject NavigationManager navManager
@inject ITagsData tagData
@inject IBlogPostData postData
@inject IUserData userData
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Creative Blogs</PageTitle>

<link rel="shortcut icon" type="image/x-icon" href="./Images/"/>
<div class="border d-flex justify-content-start w-25 mb-2">
    <button class="btn btn-dark float-end me-2" @onclick="SamplePage">Sample Data</button>
    <button class="btn btn-dark float-start mx-2" @onclick="HomePage">Home</button>
</div>


<div class="d-flex justify-content-evenly border w-25" >
    <button class="btn btn-dark" @onclick="() => OrderByNew(true)">Recent</button>
    <button class="btn btn-dark" @onclick="() => OrderByNew(false)">Top</button>
</div>
<div class="border d-flex justify-content-evenly w-25 my-2">  
    @if (tags is not null)
    {
        @foreach (var t in tags)
        {
            <div @onclick="(() => OnTagClick(t.TagName))" class="my-2">@t.TagName</div>
        }
    }
</div>

<div>@blogposts?.Count Blog Posts</div>  @*TODO: remove this as i dont plan on showing this to users*@

<div>
    <input type="text"
           class="searchbox"
           placeholder="Search"
           @bind-value="@this.InputValue"
           @bind-value:event="oninput"
           @onkeydown="@OnSearchInput"/>
</div>

<div>
    <div id="blog-post-section">
        @if (blogposts is not null)
        {
            <Virtualize Items="@blogposts" Context="b" OverscanCount="10">
                <div id="TheBigContainer" class="border w-50">
                    <div id="TopRowOfContainer" class="d-flex justify-content-start">
                        <div class="me-2" @onclick="(() => OpenDetails(b))">@b?.Author.DisplayName</div>
                        <div @onclick="(() => OpenDetails(b))">@b?.DateCreated</div>
                        <span class="ms-auto me-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark" viewBox="0 0 16 16">
                                <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
                            </svg>
                        </span>
                    </div>
                    <div id="MiddleContent">
                        <div id="Header" @onclick="(() => OpenDetails(b))">@b.Title</div>
                        <div id="Description" @onclick="(() => OpenDetails(b))">@GetSubstringDescription(b.Description)</div>
                    </div>
                    <div id="BottomContent" class="d-flex justify-content-lg-start">
                        <span class="mx-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-tags" viewBox="0 0 16 16">
                                <path d="M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z" />
                                <path d="M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z" />
                            </svg>
                        </span>
                        <div>
                            @b.Tag.TagName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div id="Right-of-vertical-ruler">

    </div>
</div>





@code {
    private List<BlogPostModel> blogposts;
    private List<TagModel> tags;
    public string InputValue { get; private set; }

    private string selectedTag = "";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync() 
    {
        tags = await tagData.GetAllTags();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender) 
    {
        if(firstRender) 
        {
            await LoadFilterState();
            await FilterBlogPosts();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState() 
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedTag));
        selectedTag = stringResults.Success ? stringResults.Value : "";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }



    private async Task SaveFilterState() 
    {
        await sessionStorage.SetAsync(nameof(selectedTag), selectedTag);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterBlogPosts() 
    {
        var output = await postData.GetAllBlogPosts();

        if (selectedTag != "")
        {
            output = output.Where(b => b.Tag?.TagName == selectedTag).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                b => b.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                b.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) || 
                b.Tag.TagName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(b => b.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(b => b.Bookmarks.Count)
                            .ThenByDescending(b => b.DateCreated).ToList();
        }

        blogposts = output;

        await SaveFilterState();
    }

    private void SamplePage() 
    {
        navManager.NavigateTo("/SampleData");
    }
    private void HomePage()
    {
        navManager.NavigateTo("/");
    }

    private string GetSubstringDescription(string description) 
    {
        if (description.Length > 100)
        {
            return description = description.Substring(0, 100);
        }
        else
        {
            return description;
        }
    }
    private async Task OrderByNew(bool isNew) 
    {
        isSortedByNew = isNew;
        await FilterBlogPosts();
    }


    private async void OnSearchInput(KeyboardEventArgs e)
    {
        var search = this.InputValue;

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            searchText = search;
            await FilterBlogPosts();
        }
    }
    

    

    private async Task OnTagClick(string tag = "") 
    {
        selectedTag = tag;
        await FilterBlogPosts();
    }

    private string GetBookmarkText(BlogPostModel blogPost) 
    {
        return blogPost.Bookmarks.Count.ToString("00");
    }

    private void OpenDetails(BlogPostModel blogPost) 
    {
        navManager.NavigateTo($"/Details/{blogPost.Id}");
    }
}


